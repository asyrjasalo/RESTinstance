[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "RESTinstance"
version = "1.4.3"
description = "Robot Framework library for RESTful JSON APIs"
authors = [{ name = "Anssi SyrjÃ¤salo", email = "opensource@syrjasalo.com" }]
dependencies = [
    "docutils",
    "flex",
    "GenSON",
    "jsonpath-ng",
    "jsonschema",
    "pygments",
    "pytz",
    "requests",
    "robotframework",
    "tzlocal",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "LGPLv3" }
keywords = ["robotframework", "library", "http", "json", "api"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Robot Framework",
    "Framework :: Robot Framework :: Library",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]

[project.urls]
Homepage = "https://pypi.org/project/RESTinstance"
Documentation = "https://asyrjasalo.github.io/RESTinstance"
Repository = "https://github.com/asyrjasalo/RESTinstance"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
format = ["black"]
test = [
    "pytest",
    "pytest-clarity",
    "pytest-instafail",
    "pytest-spec",
    "setuptools"
]

[tool.pdm.scripts]
test = "python -m pytest test/"
testenv = "npx -y mountebank restart --host localhost --localOnly true --ipWhitelist 127.0.0.1 --allowInjection --configfile testapi/apis.ejs"
atest = "python -m robot -P src --xunit xunit.xml --outputdir results atest/"
tests = { composite = ["test", "atest"] }
format = "black ."
docs = "python -m robot.libdoc -P src REST docs/index.html"
clear = { shell = "rm -rf dist/ node_modules/ .pdm-build/ .pytest_cache/ results/ src/*.egg-info mb.pid *.log" }

[tool.black]
line-length = 80
exclude = '''
/(
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | atest
  | dist
  | docs
  | node_modules
  | results
  | testapi
)/
'''

[tool.pytest]
testpaths = "test"
addopts = "--cov --spec --instafail --diff-type=auto"

[tool.flake8]
exclude = [
    ".git",
    ".venv",
    "dist",
    "docs",
    "node_modules",
    "results",
    "testapi",
    "__pycache__",
]
max-complexity = 15
max-line-length = 80

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
